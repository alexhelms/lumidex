using System.Reflection;
using System.Runtime.InteropServices;

namespace Lumidex.Core;

public static class LumidexUtil
{
    static LumidexUtil()
    {
        // Auto generated by GitVersion
        if (Assembly.GetExecutingAssembly().GetType("GitVersionInformation") is { } versionType)
        {
            var fields = versionType.GetFields();

            Version = GetFieldValue(fields, "SemVer");
            InformationalVersion = GetFieldValue(fields, "InformationalVersion");
            CommitDate = DateTime.Parse(GetFieldValue(fields, "CommitDate"));

            static string GetFieldValue(IEnumerable<FieldInfo> fields, string fieldName)
                => (string)fields.First(f => f.Name == fieldName).GetValue(null)!;
        }
    }

    public static string Copyright { get; } = "© 2024 Alex Helms and Contributors";

    public static string Version { get; } = string.Empty;

    public static string InformationalVersion { get; } = string.Empty;

    public static DateTime CommitDate { get; }

    public static string ProcessArchitecture { get; } = RuntimeInformation.ProcessArchitecture.ToString().ToLowerInvariant();

    public static string OSArchitecture { get; } = RuntimeInformation.OSArchitecture.ToString().ToLowerInvariant();

    public static string OSDescription { get; } = RuntimeInformation.OSDescription;

    public static string UserAgent { get; } = $"Lumidex/{Version} ({OSDescription}) ({OSArchitecture})";
}
