// <auto-generated />
using System;
using Lumidex.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lumidex.Core.Data.Migrations
{
    [DbContext(typeof(LumidexDbContext))]
    [Migration("20240725022000_RenameMountNameToTelescopeName")]
    partial class RenameMountNameToTelescopeName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("ImageFileTag", b =>
                {
                    b.Property<int>("ImageFilesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageFilesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ImageFileTag");
                });

            modelBuilder.Entity("Lumidex.Core.Data.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Lumidex.Core.Data.ImageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Airmass")
                        .HasColumnType("REAL");

                    b.Property<double?>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("REAL");

                    b.Property<int?>("Binning")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CameraGain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CameraName")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<int?>("CameraOffset")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CameraTemperature")
                        .HasColumnType("REAL");

                    b.Property<double?>("CameraTemperatureSetPoint")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("Declination")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPoint")
                        .HasColumnType("REAL");

                    b.Property<double?>("Elevation")
                        .HasColumnType("REAL");

                    b.Property<double?>("Exposure")
                        .HasColumnType("REAL");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterName")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("FilterWheelName")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<double?>("FocalLength")
                        .HasColumnType("REAL");

                    b.Property<string>("FocuserName")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<int?>("FocuserPosition")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("FocuserTemperature")
                        .HasColumnType("REAL");

                    b.Property<string>("HeaderHash")
                        .IsRequired()
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<double?>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("ObjectName")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<DateTime?>("ObservationTimestampLocal")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("ObservationTimestampUtc")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<double?>("PixelSize")
                        .HasColumnType("REAL");

                    b.Property<double?>("Pressure")
                        .HasColumnType("REAL");

                    b.Property<string>("ReadoutMode")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<double?>("RightAscension")
                        .HasColumnType("REAL");

                    b.Property<string>("RotatorName")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<double?>("RotatorPosition")
                        .HasColumnType("REAL");

                    b.Property<string>("TelescopeName")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<double?>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("HeaderHash");

                    b.HasIndex("LibraryId");

                    b.HasIndex("Path");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("Lumidex.Core.Data.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastScan")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Lumidex.Core.Data.ObjectAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("Alias");

                    b.HasIndex("ObjectName");

                    b.ToTable("ObjectAliases");
                });

            modelBuilder.Entity("Lumidex.Core.Data.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("#ffffffff");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ImageFileTag", b =>
                {
                    b.HasOne("Lumidex.Core.Data.ImageFile", null)
                        .WithMany()
                        .HasForeignKey("ImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lumidex.Core.Data.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lumidex.Core.Data.ImageFile", b =>
                {
                    b.HasOne("Lumidex.Core.Data.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });
#pragma warning restore 612, 618
        }
    }
}
